CREATE DATABASE log_analysis CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
-- 切换数据库
USE log_analysis;
CREATE TABLE `error_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `log_time` datetime NOT NULL COMMENT '日志记录时间',
  `error_message` text NOT NULL COMMENT '错误日志内容',
  `analysis_result` text COMMENT 'AI分析结果',
  `application_id` varchar(100) DEFAULT NULL COMMENT '应用ID',
  `created_at` datetime NOT NULL COMMENT '创建时间',
  `request_path` varchar(500) DEFAULT NULL COMMENT '请求路径'
  PRIMARY KEY (`id`),
  KEY `idx_application_id` (`application_id`)
) ENGINE=MyISAM AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4;

-- 初始化模拟数据
INSERT INTO `log_analysis`.`error_logs` (`id`, `log_time`, `error_message`, `analysis_result`, `application_id`, `created_at`) VALUES (1, '2025-03-15 15:12:19', 'Quartz.JobPersistenceException: Couldn\'t store trigger \'DEFAULT.716_0000000000001\' for \'default.716_12\' job: Couldn\'t retrieve job because a required type was not found: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n ---> Quartz.JobPersistenceException: Couldn\'t retrieve job because a required type was not found: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n ---> System.TypeLoadException: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n   at Quartz.Simpl.SimpleTypeLoadHelper.LoadType(String name)\n   at Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)\n   --- End of inner exception stack trace ---\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.StoreTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger newTrigger, IJobDetail job, Boolean replaceExisting, String state, Boolean forceState, Boolean recovering, CancellationToken cancellationToken) [See nested exception: System.TypeLoadException: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n   at Quartz.Simpl.SimpleTypeLoadHelper.LoadType(String name)\n   at Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)]\n   --- End of inner exception stack trace ---\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.StoreTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger newTrigger, IJobDetail job, Boolean replaceExisting, String state, Boolean forceState, Boolean recovering, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.DoUpdateOfMisfiredTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger trig, Boolean forceState, String newStateIfNotComplete, Boolean recovering)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobs(ConnectionAndTransactionHolder conn, Boolean recovering, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.DoRecoverMisfires(Guid requestorId, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.DoRecoverMisfires(Guid requestorId, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.MisfireHandler.Manage() [See nested exception: Quartz.JobPersistenceException: Couldn\'t retrieve job because a required type was not found: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n ---> System.TypeLoadException: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n   at Quartz.Simpl.SimpleTypeLoadHelper.LoadType(String name)\n   at Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)\n   --- End of inner exception stack trace ---\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.StoreTrigger(ConnectionAndTransactionHolder conn, IOperableTrigger newTrigger, IJobDetail job, Boolean replaceExisting, String state, Boolean forceState, Boolean recovering, CancellationToken cancellationToken) [See nested exception: System.TypeLoadException: Could not load type \'byt.srv.jobscheduler.JobModels.HttpServiceJob, byt.srv.jobscheduler\'\n   at Quartz.Simpl.SimpleTypeLoadHelper.LoadType(String name)\n   at Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobDetail(ConnectionAndTransactionHolder conn, JobKey jobKey, ITypeLoadHelper loadHelper, CancellationToken cancellationToken)\n   at Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(ConnectionAndTransactionHolder conn, JobKey jobKey, CancellationToken cancellationToken)]]', '分析服务暂时不可用', 'byt.srv.jobscheduler', '2025-03-15 07:14:44');
